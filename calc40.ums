    .zero r0
    .temp r6, r7
    .section rodata
    jumptable:
    .space 256
    .section init
main: // initializes jumptable and starts the program
    push r1 on stack r2                                             // save return value
    push r3 on stack r2                                             // save r3 value
    r3 := jumptable                                                 // set r3 to beginning of jumptable
    goto init_jumptable linking r1  

init_jumptable: // sets all values in jumptable to input_error
                // then goes to init_jumptable_2
    if (r3 >s jumptable + 255 ) goto init_jumptable_2 using r5      // begins next phase of initialization
                                                                    // after setting all values to input_error
    m[r0][r3] := input_error
    r3 := r3 + 1                                                    // increments r3 (index in jumptable) by 1
    goto init_jumptable                                             // recursively initializes values

init_jumptable_2: // specifies the locations in the 
                  // jumptable for each operation 
    m[r0][jumptable + '0'] := digit 
    m[r0][jumptable + '1'] := digit 
    m[r0][jumptable + '2'] := digit 
    m[r0][jumptable + '3'] := digit 
    m[r0][jumptable + '4'] := digit
    m[r0][jumptable + '5'] := digit  
    m[r0][jumptable + '6'] := digit 
    m[r0][jumptable + '7'] := digit 
    m[r0][jumptable + '8'] := digit 
    m[r0][jumptable + '9'] := digit

    m[r0][jumptable + ' '] := waiting
    m[r0][jumptable + '\n'] := newline 

    m[r0][jumptable + '*'] := mul 
    m[r0][jumptable + '+'] := add
    m[r0][jumptable + '-'] := sub
    m[r0][jumptable + '/'] := div
    m[r0][jumptable + '|'] := bor
    m[r0][jumptable + '&'] := band
    m[r0][jumptable + 'c'] := change
    m[r0][jumptable + '~'] := bcomp
    m[r0][jumptable + 's'] := swap
    m[r0][jumptable + 'd'] := dup
    m[r0][jumptable + 'p'] := pop_v
    m[r0][jumptable + 'z'] := zero 
    
    goto waiting                                                // finish init, begin taking input
                    
.section text
waiting: // represents the waiting state, places user input in r3
    r3 := input()
waiting_with_character: // checks for EOF, then enters jumptable
    if (r3 <s 0) goto finish_main using r5                      // check for EOF
    r5 := jumptable + r3                                        // branch indirect through jump table
    r5 := m[r0][r5]
    goto r5

entering: // represents the entering state after recieving a numeric input
          // places user input in r3
    r3 := input()
    if (r3 >=s '0') goto entering_digit using r5                // if consecutive numeric input
                                                                // may be given, jumps to entering_digit
    goto waiting_with_character                                 // returns to standard waiting state
                                                                // if r3 isn't a number
entering_digit: // represents the entering state while recieving 
                // a multi-digit number    
    if (r3 >s '9') goto waiting_with_character using r5         // returns to standard waiting state
                                                                // if r3 isn't a number
    r3 := r3 -'0'                                               // r3 gets numeric val of input
    pop r5 off stack r4                                         // r5 holds last numeric input
    r5 := r5 * 10                                               
    r5 := r5 + r3                                               // appends r3 as least sig digit of r5
    push r5 on stack r4
    goto entering                                               // returns to entering state

check1: // checks if valstack is nonempty
    if (r4 == valstack) goto stack_error1 using r5              // check for nothing on stack
    goto r1

check2: // checks if valstack is storing at least 2 values
    if (r4 == valstack) goto stack_error2 using r5              // check for nothing on stack
    if (r4 + 1 == valstack) goto stack_error2 using r3, r5      // check only 1 element exists on stack
    goto r1

input_error: // outputs error message if input doesn't 
             // correspond to an operation in the jumptable
    output "Unknown character '"                                // print error statement according to ref
    output r3                                                   // r3 represents user input
    output "'\n"
    goto waiting

stack_error1: // outputs error message if stack is empty
    output "Stack underflow---expected at least 1 element\n"
    goto waiting

stack_error2: // outputs error message if stack has less than two elements
    output "Stack underflow---expected at least 2 elements\n"
    goto waiting

div_error: // outputs error message if divisor is zero
    output "Division by zero\n"
    push r5 on stack r4
    push r3 on stack r4
    goto waiting
    
digit: // pushes numerical value of user input onto the stack
    r3 := r3 - '0'                                              // changes user char input into 
                                                                // numeric repreentation
    push r3 on stack r4
    goto entering                                               // goes to entering state

newline:
    r3 := r4                                                    // r3 is set to the top of valstack
newline_loop: // loop to print all values on the stack
    if (r3 == valstack) goto waiting using r5                   // exit when end of valstack is reached
    r5 := m[r0][r3]                                             // accesses next element in valstack
    output ">>> "
    push r5 on stack r4                                         // pushes r5 onto valstack to get printed 
    goto print_d linking r1 
    output "\n"
    pop stack r4                                                // removes r5 from valstack
    r3 := r3 + 1                                                // increments r3 down valstack
    goto newline_loop                                           // recursively prints contents of valstack
    
mul: // pops, then multiplies the two numbers on 
     // top of the stack and pushes the result    
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4   
    r3 := r5 * r3
    push r3 on stack r4
    goto waiting 

add:
     // pops, then adds the two numbers on 
     // top of the stack and pushes the result
    goto check2 linking r1
    pop r3 off stack r4                                         // r3 holds first number from stack
    pop r5 off stack r4                                         // r5 holds second number from stack
    r3 := r5 + r3                                               // r3 holds sum, push result on stack
    push r3 on stack r4                                         
    goto waiting 

sub: // pops, then subtracts the second number on stack
     // by the first then pushes the result
    goto check2 linking r1
    pop r3 off stack r4                                         // r3 holds first number from stack
    pop r5 off stack r4                                         // r5 holds second number from stack
    r3 := r5 - r3                                               // r3 holds different, push result on stack
    push r3 on stack r4
    goto waiting 

div: // pops, then divides the second number on stack
     // by the first then pushes the result
    goto check2 linking r1
    pop r3 off stack r4                                         // r3 holds first number from stack
    pop r5 off stack r4                                         // r5 holds second number from stack

    if (r3 == 0) goto div_error                                 // calls error if trying to divide by 0
    
    push r4 on stack r2                                         // save valstack address to use 
                                                                // r4 as temp register
    r4 := 0x8000 * 0x10000                                      // set r4 to largest neg value for comparison
    push r5 on stack r2                                         // saves value of dividend to use r5 as temp register
    if (r3 >=s r4) goto neg using r5                            // checks if divisor is negative and goes to
                                                                // appropriate conditional branch based on result
    goto pos  

neg: // conditional branch if the divisor is negative, checks
     // if dividend is positive or negative
    pop r5 off stack r2                                         // restores value of dividend to r5
    push r3 on stack r2                                         // saves value of divisor to use r3 as temp register
    if (r5 >=s r4) goto neg_neg using r3                        // checks if dividend is negative and goes to
                                                                // appropriate conditional branch based on result
    goto neg_pos

pos: // conditional branch if the divisor is positive, checks
     // if dividend is negative
    pop r5 off stack r2                                         // restores value of dividend to r5
    push r3 on stack r2                                         // saves value of divisor to use r3 as temp riter
    if (r5 >=s r4) goto pos_neg using r3                        // checks if divisor is negative and goes to
                                                                // appropriate conditional branch based on result
    goto pos_pos


pos_pos: // division when dividend (r5) and  
         // and divisor (r3) are positive
    pop r3 off stack r2
    pop r4 off stack r2
    r3 := r5 / r3
    push r3 on stack r4
    goto waiting

pos_neg: // division when dividend (r5) is negative 
         // and divisor (r3) is positive
    pop r3 off stack r2
    pop r4 off stack r2
    r5 := -r5
    r3 := r5 / r3
    r3 := -r3
    push r3 on stack r4
    goto waiting

neg_pos: // division when dividend (r5) is positive 
         // and divisor (r3) is negative
    pop r3 off stack r2
    pop r4 off stack r2
    r3 := -r3
    r3 := r5 / r3
    r3 := -r3
    push r3 on stack r4
    goto waiting

neg_neg: // division when dividend (r5) and  
         // and divisor (r3) are negative
    pop r3 off stack r2
    pop r4 off stack r2
    r3 := -r3
    r5 := -r5
    r3 := r5 / r3
    push r3 on stack r4
    goto waiting  

bor: // take bitwise or of the top two numbers on 
     // the value stack and push the result
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 | r3
    push r3 on stack r4
    goto waiting 

band: // take bitwise and of the top two numbers on 
      // the value stack and push the result
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 & r3
    push r3 on stack r4
    goto waiting

change: // replace the number on top of the 
        // value stack with its complement
    goto check1 linking r1
    pop r3 off stack r4
    r3 := -r3 
    push r3 on stack r4
    goto waiting

bcomp: // take bitwise complement of the top two  
       // numbers on the stack and push the result
    goto check1 linking r1
    pop r3 off stack r4 
    r3 := ~r3
    push r3 on stack r4
    goto waiting

swap: // swap the top two numbers on the value stack
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    push r3 on stack r4
    push r5 on stack r4
    goto waiting

dup: // duplicate the number on top of the value stack    
    goto check1 linking r1
    r3 := m[r0][r4]
    push r3 on stack r4
    goto waiting

pop_v: // pop the number on top of the value stack
    goto check1 linking r1
    pop stack r4
    goto waiting

zero: // pop all numbers on the value stack
    if (r4 == valstack) goto waiting using r5                   // exit when end of valstack is reached
    pop stack r4
    goto zero

.section init
finish_main:
    pop r3 off stack r2                             // retrieve r3 value
    pop r5 off stack r2                             // get return value
    r1 := 0                                         // EXIT_SUCCESS
    goto r5
