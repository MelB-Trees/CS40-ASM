    .zero r0
    .temp r6, r7
    .section rodata
    jumptable:
    .space 256
    .section init
main:
    push r1 on stack r2                                             // save return value
    push r3 on stack r2                                             // save r3 value

    r3 := jumptable

    goto init_jumptable linking r1  

init_jumptable: 
    if (r3 >s jumptable + 255 ) goto init_jumptable_2 using r5      // leave function
    m[r0][r3] := input_error
    r3 := r3 + 1
    
    goto init_jumptable

init_jumptable_2:
    m[r0][jumptable + '0'] := digit 
    m[r0][jumptable + '1'] := digit 
    m[r0][jumptable + '2'] := digit 
    m[r0][jumptable + '3'] := digit 
    m[r0][jumptable + '4'] := digit
    m[r0][jumptable + '5'] := digit  
    m[r0][jumptable + '6'] := digit 
    m[r0][jumptable + '7'] := digit 
    m[r0][jumptable + '8'] := digit 
    m[r0][jumptable + '9'] := digit

    m[r0][jumptable + ' '] := waiting 

    m[r0][jumptable + '*'] := mul 
    m[r0][jumptable + '+'] := add
    m[r0][jumptable + '-'] := sub
    m[r0][jumptable + '/'] := div
    m[r0][jumptable + '|'] := bor
    m[r0][jumptable + '&'] := band

    //m[r0][jumptable + 'n'] := push_num

    goto waiting
                    
.section text
waiting:
    output "waiting for input: \n"
    r3 := input()
waiting_with_character:
    if (r3 <s 0) goto finish_main using r5          // check for EOF
    r5 := jumptable + r3                            // branch indirect through jump table
    r5 := m[r0][r5]
    goto r5


entering:
    output "went to entering \n"
    
    goto waiting

check1:
    r5 := valstack
    if (r4 == r5) goto stack_error using r3  //check for nothing on stack
    goto r1

check2:
    r5 := valstack
    if (r4 + 1 == r5) goto stack_error using r3  //check only 1 element on stack
    goto r1

input_error:
    output "Unknown character '"                               //print error statement according to ref
    output r3
    output "'\n"
    goto waiting

stack_error:
    output "Stack underflow---expected at least 2 elements\n"
    goto waiting
    
digit:
    r3 := r3 - '0'
    output "digit is: "
    push r3 on stack r4
    goto print_d linking r1
    pop stack r4
    output "\n"

    push r3 on stack r4

    goto entering

    
mul:
    output "called multiply\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4   
    r3 := r5 * r3
    push r3 on stack r4
    
    output "The product is: "
    goto print_d linking r1
    output "\n"

    goto waiting 

add:
    output "called add\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 + r3
    push r3 on stack r4
    
    output "The sum is: "
    goto print_d linking r1
    output "\n"

    goto waiting 

sub:
    output "called sub\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 - r3
    push r3 on stack r4
    
    output "The difference is: "
    goto print_d linking r1
    output "\n"

    goto waiting 

div:
    output "called div\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4
    if (r3 == 0) goto div_error  
    
    r3 := r5 / r3
    push r3 on stack r4
    
    output "The quotient is: "
    goto print_d linking r1
    output "\n"

    goto waiting

div_error:
    output "Division by zero\n"
    push r5 on stack r4
    push r3 on stack r4
    goto waiting

bor:
    output "called bitwise or\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 | r3
    push r3 on stack r4
    
    output "The bitwise or is: "
    goto print_d linking r1
    output "\n"

    goto waiting 

band:
    output "called bitwise and\n"
    goto check1 linking r1
    goto check2 linking r1
    pop r3 off stack r4
    pop r5 off stack r4  
    r3 := r5 & r3
    push r3 on stack r4
    
    output "The bitwise and is: "
    goto print_d linking r1
    output "\n"

    goto waiting


//push_num:
//    output "called push_num\n"
//    goto waiting

.section init
finish_main:

    output "got to finish main\n"
    pop r3 off stack r2                             // retrieve r3 value
    pop r5 off stack r2                             // get return value
    r1 := 0                                         // EXIT_SUCCESS
    goto r5
