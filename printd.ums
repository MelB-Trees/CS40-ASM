.section init
    .zero r0
    .temp r6,r7

print_d:
    push r1 on stack r2                             // save value of r1
    push r3 on stack r2                             // save non-volatile register

    r3 := m[r0][r2+2]                               // get value to print from stack
    if (r3 == 0) goto base_case                     // case where r3 is zero
    r4 := 0x8000 * 0x10000                          // set r4 to largest negative value for comparison                                                                 
    if (r3 >s r4) goto neg_case using r5            // case where r3 is negative but not largest negative value
    if (r3 >=s r4) goto special_case using r5       // case where r3 is largest negative value

    r5 := r3 / 10                                   // if r3 is single-digit number
    if (r5 == 0) goto base_case

    push r5 on stack r2                             // push n-1 most sig digits onto stack
    goto print_d linking r1                         // recursive print_d call
    pop stack r2                                    // pop n-1 most sig digits off stack
    r3 := r3 mod 10                                 // get least significant digit
    output r3 + '0'                                 // print least significant digit
    goto finish_print                               

neg_case:
    output "-"                                      // append negative sign before printing digits
    r5 := -r3 using r4                              // get two's complement and push onto stack
    push r5 on stack r2                             // push two's complement onto stack
    goto print_d linking r1                         // recursive print_d call
    pop stack r2                                    // pop two's complement from stack
    goto finish_print

special_case:
    output "-2147483648"                            // directly prints largest negative value
    goto finish_print

base_case:
    output r3 + '0'                                 // print decimal equivalent of value 
    
finish_print:
    pop r3 off stack r2                             // restore saved register
    pop r5 off stack r2                             // get return value
    goto r5                                         
